name: Build & Release Era Parser

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

concurrency:
  group: era-parser-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: era-parser

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Organization Name
        id: org_name
        run: |
          org_name=$(echo "${{ github.repository_owner }}")
          echo "Organization Name: $org_name"
          echo "org_name=$org_name" >> $GITHUB_OUTPUT

      - name: Extract commit hash
        id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.commit.outputs.short }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ steps.org_name.outputs.org_name }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Organization Name
        id: org_name
        run: |
          org_name=$(echo "${{ github.repository_owner }}")
          echo "org_name=$org_name" >> $GITHUB_OUTPUT

      - name: Extract commit hash
        id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Test Docker image
        run: |
          # Pull the built image
          docker pull ${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:${{ steps.commit.outputs.short }}
          
          # Test basic functionality
          echo "Testing era-parser --help"
          docker run --rm ${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:${{ steps.commit.outputs.short }} era-parser --help
          
          # Test migration commands
          echo "Testing era-parser --migrate list"
          docker run --rm ${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:${{ steps.commit.outputs.short }} era-parser --migrate list || echo "Migration list failed (expected without ClickHouse connection)"
          
          echo "âœ… Basic Docker image tests passed"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Get Organization Name
        id: org_name
        run: |
          org_name=$(echo "${{ github.repository_owner }}")
          echo "org_name=$org_name" >> $GITHUB_OUTPUT

      - name: Extract commit hash
        id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:${{ steps.commit.outputs.short }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    runs-on: ubuntu-latest
    needs: [build, test, security-scan]
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Organization Name
        id: org_name
        run: |
          org_name=$(echo "${{ github.repository_owner }}")
          echo "org_name=$org_name" >> $GITHUB_OUTPUT

      - name: Extract tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Era Parser ${{ steps.tag.outputs.tag }}
          body: |
            ## Era Parser ${{ steps.tag.outputs.tag }}
            
            ### Docker Images
            - `${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}`
            - `${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:latest`
            
            ### Usage
            ```bash
            # Pull the image
            docker pull ${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
            
            # Run era-parser
            docker run --rm ${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }} era-parser --help
            ```
            
            ### Terraform Deployment
            Update your `terraform.tfvars`:
            ```hcl
            era_parser_image = "${{ env.REGISTRY }}/${{ steps.org_name.outputs.org_name }}/${{ env.IMAGE_NAME }}"
            era_parser_version = "${{ steps.tag.outputs.tag }}"
            ```
            
            ### Changes
            See the [CHANGELOG.md](CHANGELOG.md) for detailed changes in this release.
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, '-') }}
          generate_release_notes: true